Final Project
Timothy Mason
Computer Science 5229 - Computer Graphics

Total time:  102 hours


Compilation:
    'qmake && make'.
    In Linux, the application will be in the main folder:  ./final
    
Controls:
    Mouse: click and drag to look around
        W:  Move forward
   S or X:  Move backwards
        A:  Move left (sideways)
        D:  Move right (sideways)
        Q:  Move forward & left (diagonal)
        E:  Move forward & right (diagonal)
        Z:  Move backwards & left (diagonal)
        C:  Move backwards & right (diagonal)
      Esc:  Exit

This program is a simulation of a mountain lake scene.  It is implemented in C++
using the Qt5 framework.  It is using 100% programmable shaders, and everything except the skybox
uses per-pixel lighting.  There is also alpha-channel based texture cutouts to create realistic looking 
leaves on the trees.

To leverage a low-polygon spruce tree obj model I found, I implemented a C++ & Qt based OBJ file
loader.  It is based loosely on the class ex26.c, but has been completely rewritten as a C++ class
which uses the Qt framework for dynamic arrays, image loading, and so forth.  Also, in keeping
with coding practices demonstrated in the Qt5 example programs, my app does not use display lists.
Instead, it is using OpenGL VBOs (Vertex Buffer Object).  


Cool Features:

* The terrain is 100% randomly generated.  It will be different every time the application is run.
  The terrain generation uses a "diamond square" algorithm - citation is below.
* The terrain generator is implemented with an intentional bias towards creating a bowl-like landscape.
  This was done to facilitate having a fixed water level that gives the appearance of a lake.  Occasionally
  it comes out looking more like a marsh-land with multiple small lakes.  The resulting terrain has a 
  very satisfying appearance.
* The water level is dynamically determined based on the average elevation of the terrain.
* The starting location is dynamically determined to have the scene always start at the 
  shore of a lake.  There's a slight possibility my algorithm won't be able to find the lake, in which 
  case it will default to standing amongst the trees.  A quick restart should generate a new world with
  the expected lake (the likelihood of "no lake" seems low in my testing).
* The initial "look at" vector is fixed to look towards the sun.  This is so you can see the awesome
  per-pixel specular lighting spot on the lake.  :-)   It almost makes you want to squint!
* There are 500 trees scattered about the landscape, with pseudo-realistic leaves. When close-up, you can
  tell the trees are low-polygon, but the appearance is still rather convincing.
* The trees are randomly placed with restrictions - they cannot be in the middle of the water, although
  it is allowable for them to be a little bit wet if they are near a shoreline.  They also cannot be
  placed too closely - a minimum separation is enforced.
* Viewer movement is restricted to stay inside the world, out of the water, and out of tree trunks.  If
  you get "stuck" against something, just move away from the object.



Citations / credits:

Low polygon spruce tree model:
	https://www.turbosquid.com/3d-models/3d-spruce-model/786246

"Diamond Square" recursive terrain generation:
    "The idea was first introduced by Fournier, Fussell and Carpenter at SIGGRAPH 1982.":  Fournier, Alain; 
    Fussell, Don; Carpenter, Loren (June 1982). "Computer rendering of stochastic models".  Communications 
    of the ACM. 25 (6): 371â€“384.  doi:10.1145/358523.358553 
        https://en.wikipedia.org/wiki/Diamond-square_algorithm
    
    My C++ implementation is based from the example code found at: 
	https://medium.com/@nickobrien/diamond-square-algorithm-explanation-and-c-implementation-5efa891e486f


GLSL Programming/Unity/Transparent Textures - Discarding Transparent Fragments:
	https://en.wikibooks.org/wiki/GLSL_Programming/Unity/Transparent_Textures

OpenGL Software Development Kit- Per Fragment Lighting Tutorial example code:
    https://www.opengl.org/sdk/docs/tutorials/ClockworkCoders/lighting.php